/* WEB_COMPILER.java */
/* Generated By:JavaCC: Do not edit this line. WEB_COMPILER.java */
import java.io.*;
public class WEB_COMPILER implements WEB_COMPILERConstants {
  public static void main(String args[]) throws ParseException {
    WEB_COMPILER parser = new WEB_COMPILER(System.in);
    try{
    String fullHtmlCode = parser.Input();
    System.out.println(fullHtmlCode);
    }catch (Exception e){
        System.out.println("ERROR :: THERE IS ERROR IN YOUR CODE :: TRY AGAIN");
    }
  }

  static final public String Input() throws ParseException {String fullHtmlCode = "";
 String partialCode = "";
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 6:{
        ;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      partialCode = create();
fullHtmlCode += partialCode + "\n";
      jj_consume_token(5);
    }
BufferedWriter output = null;
             try {
                 System.out.println();
                 File file = new File("D:\\myWebPage.html");
                 output = new BufferedWriter(new FileWriter(file));
                 output.write(fullHtmlCode);
                  output.close();
             } catch ( IOException e ) {
                 e.printStackTrace();
             }
             {if ("" != null) return fullHtmlCode;}
    jj_consume_token(5);
    throw new Error("Missing return statement in function");
}

  static final public String create() throws ParseException {String htmlCode;
    jj_consume_token(6);
    htmlCode = element();
{if ("" != null) return htmlCode;}
    throw new Error("Missing return statement in function");
}

  static final public String element() throws ParseException {String elementCode = "";
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 7:{
      jj_consume_token(7);
      jj_consume_token(8);
      jj_consume_token(9);
      elementCode = img();
      break;
      }
    case 10:{
      jj_consume_token(10);
      elementCode = header();
      break;
      }
    case 11:{
      jj_consume_token(11);
      elementCode = para();
      break;
      }
    case 12:{
      jj_consume_token(12);
      elementCode = url();
      break;
      }
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return elementCode;}
    throw new Error("Missing return statement in function");
}

  static final public String img() throws ParseException {String imgUrl = "";
    jj_consume_token(qoute);
    imgUrl = sentence();
    jj_consume_token(qoute);
{if ("" != null) return "<img src=\"" + imgUrl + "\" />";}
    throw new Error("Missing return statement in function");
}

  static final public String url() throws ParseException {AttributesParser parser = new AttributesParser();
    decorated_url(parser);
if (parser.color.equals("") && parser.font.equals(""))
            {if ("" != null) return "<a " + parser.links + ">" + parser.text + "</a>";}
        else
             {if ("" != null) return "<a " + parser.links + " style = \"" + parser.color + parser.font + "\">" + parser.text + "</a>";}
    throw new Error("Missing return statement in function");
}

  static final public String header() throws ParseException {AttributesParser parser = new AttributesParser();
    decorated_text(parser);
if (parser.color.equals("") && parser.font.equals(""))
            {if ("" != null) return "<h1>" + parser.text + "</h1>";}
         else
             {if ("" != null) return "<h1 style = \"" + parser.color + parser.font + "\">" + parser.text + "</h1>";}
    throw new Error("Missing return statement in function");
}

  static final public String para() throws ParseException {AttributesParser parser = new AttributesParser();
    decorated_text(parser);
if (parser.color.equals("") && parser.font.equals(""))
            {if ("" != null) return "<p>" + parser.text + "</p>";}
          else
             {if ("" != null) return "<p style = \"" + parser.color + parser.font + "\">" + parser.text + "</p>";}
    throw new Error("Missing return statement in function");
}

  static final public void decorated_url(AttributesParser parser) throws ParseException {String text = "";
      String color = "";
      String font = "";
      String linkText = "";
    jj_consume_token(8);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 12:{
      jj_consume_token(12);
      linkText = link();
      break;
      }
    case 13:{
      jj_consume_token(13);
      text = text();
      break;
      }
    case 14:{
      jj_consume_token(14);
      color = color();
      break;
      }
    case 15:{
      jj_consume_token(15);
      font = font();
      break;
      }
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 16:{
        ;
        break;
        }
      default:
        jj_la1[3] = jj_gen;
        break label_2;
      }
      jj_consume_token(16);
      decorated_url(parser);
    }
if (parser.links.equals(""))
                    parser.links = linkText;
             parser.text = text + parser.text;
             parser.color = color + parser.color;
             parser.font = font + parser.font;
}

  static final public void decorated_text(AttributesParser parser) throws ParseException {String text = "";
 String color = "";
 String font = "";
    jj_consume_token(8);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 13:{
      jj_consume_token(13);
      text = text();
      break;
      }
    case 14:{
      jj_consume_token(14);
      color = color();
      break;
      }
    case 15:{
      jj_consume_token(15);
      font = font();
      break;
      }
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 16:{
        ;
        break;
        }
      default:
        jj_la1[5] = jj_gen;
        break label_3;
      }
      jj_consume_token(16);
      decorated_text(parser);
    }
parser.text = text + parser.text;
     parser.color = color + parser.color;
     parser.font = font + parser.font;
}

  static final public String text() throws ParseException {String insertedText;
    jj_consume_token(qoute);
    insertedText = sentence();
    jj_consume_token(qoute);
{if ("" != null) return insertedText;}
    throw new Error("Missing return statement in function");
}

  static final public String color() throws ParseException {String insertedText;
    jj_consume_token(qoute);
    insertedText = sentence();
    jj_consume_token(qoute);
{if ("" != null) return "color:" + insertedText + ";";}
    throw new Error("Missing return statement in function");
}

  static final public String link() throws ParseException {String insertedLink;
    jj_consume_token(qoute);
    insertedLink = sentence();
    jj_consume_token(qoute);
{if ("" != null) return "href = \"" + insertedLink + "\"";}
    throw new Error("Missing return statement in function");
}

  static final public String font() throws ParseException {String insertedText;
    jj_consume_token(qoute);
    insertedText = sentence();
    jj_consume_token(qoute);
{if ("" != null) return "font-family:" + insertedText + ";";}
    throw new Error("Missing return statement in function");
}

  static final public String sentence() throws ParseException {String text = "";
 Token alpha;
    alpha = jj_consume_token(alphanumeric);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case alphanumeric:{
        ;
        break;
        }
      default:
        jj_la1[6] = jj_gen;
        break label_4;
      }
      text = sentence();
    }
{if ("" != null) return alpha.image + text;}
    throw new Error("Missing return statement in function");
}

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public WEB_COMPILERTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[7];
  static private int[] jj_la1_0;
  static {
	   jj_la1_init_0();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x40,0x1c80,0xf000,0x10000,0xe000,0x10000,0x4,};
	}

  /** Constructor with InputStream. */
  public WEB_COMPILER(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public WEB_COMPILER(java.io.InputStream stream, String encoding) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser.  ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new WEB_COMPILERTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public WEB_COMPILER(java.io.Reader stream) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new WEB_COMPILERTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new WEB_COMPILERTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public WEB_COMPILER(WEB_COMPILERTokenManager tm) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(WEB_COMPILERTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  static private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[17];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 7; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 17; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  static private boolean trace_enabled;

/** Trace enabled. */
  static final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
class AttributesParser{
String text = "";
String font = "";
String color = "";
String links = "";
}
